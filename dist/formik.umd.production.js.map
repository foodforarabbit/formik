{"version":3,"file":"formik.umd.production.js","sources":["../src/utils.ts","../src/FormikContext.tsx","../src/Formik.tsx","../src/Field.tsx","../src/Form.tsx","../src/connect.tsx","../src/FieldArray.tsx","../src/ErrorMessage.tsx","../src/withFormik.tsx"],"sourcesContent":["import clone from 'lodash/clone';\nimport toPath from 'lodash/toPath';\nimport * as React from 'react';\n\n// Assertions\n\n/** @private is the given object a Function? */\nexport const isFunction = (obj: any): obj is Function =>\n  typeof obj === 'function';\n\n/** @private is the given object an Object? */\nexport const isObject = (obj: any): boolean =>\n  obj !== null && typeof obj === 'object';\n\n/** @private is the given object an integer? */\nexport const isInteger = (obj: any): boolean =>\n  String(Math.floor(Number(obj))) === obj;\n\n/** @private is the given object a string? */\nexport const isString = (obj: any): obj is string =>\n  Object.prototype.toString.call(obj) === '[object String]';\n\n/** @private is the given object a NaN? */\n// eslint-disable-next-line no-self-compare\nexport const isNaN = (obj: any): boolean => obj !== obj;\n\n/** @private Does a React component have exactly 0 children? */\nexport const isEmptyChildren = (children: any): boolean =>\n  React.Children.count(children) === 0;\n\n/** @private is the given object/value a promise? */\nexport const isPromise = (value: any): value is PromiseLike<any> =>\n  isObject(value) && isFunction(value.then);\n\n/** @private is the given object/value a type of synthetic event? */\nexport const isInputEvent = (value: any): value is React.SyntheticEvent<any> =>\n  value && isObject(value) && isObject(value.target);\n\n/**\n * Same as document.activeElement but wraps in a try-catch block. In IE it is\n * not safe to call document.activeElement if there is nothing focused.\n *\n * The activeElement will be null only if the document or document body is not\n * yet defined.\n *\n * @param {?Document} doc Defaults to current document.\n * @return {Element | null}\n * @see https://github.com/facebook/fbjs/blob/master/packages/fbjs/src/core/dom/getActiveElement.js\n */\nexport function getActiveElement(doc?: Document): Element | null {\n  doc = doc || (typeof document !== 'undefined' ? document : undefined);\n  if (typeof doc === 'undefined') {\n    return null;\n  }\n  try {\n    return doc.activeElement || doc.body;\n  } catch (e) {\n    return doc.body;\n  }\n}\n\n/**\n * Deeply get a value from an object via its path.\n */\nexport function getIn(\n  obj: any,\n  key: string | string[],\n  def?: any,\n  p: number = 0\n) {\n  const path = toPath(key);\n  while (obj && p < path.length) {\n    obj = obj[path[p++]];\n  }\n  return obj === undefined ? def : obj;\n}\n\n/**\n * Deeply set a value from in object via it's path. If the value at `path`\n * has changed, return a shallow copy of obj with `value` set at `path`.\n * If `value` has not changed, return the original `obj`.\n *\n * Existing objects / arrays along `path` are also shallow copied. Sibling\n * objects along path retain the same internal js reference. Since new\n * objects / arrays are only created along `path`, we can test if anything\n * changed in a nested structure by comparing the object's reference in\n * the old and new object, similar to how russian doll cache invalidation\n * works.\n *\n * In earlier versions of this function, which used cloneDeep, there were\n * issues whereby settings a nested value would mutate the parent\n * instead of creating a new object. `clone` avoids that bug making a\n * shallow copy of the objects along the update path\n * so no object is mutated in place.\n *\n * Before changing this function, please read through the following\n * discussions.\n *\n * @see https://github.com/developit/linkstate\n * @see https://github.com/jaredpalmer/formik/pull/123\n */\nexport function setIn(obj: any, path: string, value: any): any {\n  let res: any = clone(obj); // this keeps inheritance when obj is a class\n  let resVal: any = res;\n  let i = 0;\n  let pathArray = toPath(path);\n\n  for (; i < pathArray.length - 1; i++) {\n    const currentPath: string = pathArray[i];\n    let currentObj: any = getIn(obj, pathArray.slice(0, i + 1));\n\n    if (currentObj) {\n      resVal = resVal[currentPath] = clone(currentObj);\n    } else {\n      const nextPath: string = pathArray[i + 1];\n      resVal = resVal[currentPath] =\n        isInteger(nextPath) && Number(nextPath) >= 0 ? [] : {};\n    }\n  }\n\n  // Return original object if new value is the same as current\n  if ((i === 0 ? obj : resVal)[pathArray[i]] === value) {\n    return obj;\n  }\n\n  if (value === undefined) {\n    delete resVal[pathArray[i]];\n  } else {\n    resVal[pathArray[i]] = value;\n  }\n\n  // If the path array has a single element, the loop did not run.\n  // Deleting on `resVal` had no effect in this scenario, so we delete on the result instead.\n  if (i === 0 && value === undefined) {\n    delete res[pathArray[i]];\n  }\n\n  return res;\n}\n\n/**\n * Recursively a set the same value for all keys and arrays nested object, cloning\n * @param object\n * @param value\n * @param visited\n * @param response\n */\nexport function setNestedObjectValues<T>(\n  object: any,\n  value: any,\n  visited: any = new WeakMap(),\n  response: any = {}\n): T {\n  for (let k of Object.keys(object)) {\n    const val = object[k];\n    if (isObject(val)) {\n      if (!visited.get(val)) {\n        visited.set(val, true);\n        // In order to keep array values consistent for both dot path  and\n        // bracket syntax, we need to check if this is an array so that\n        // this will output  { friends: [true] } and not { friends: { \"0\": true } }\n        response[k] = Array.isArray(val) ? [] : {};\n        setNestedObjectValues(val, value, visited, response[k]);\n      }\n    } else {\n      response[k] = value;\n    }\n  }\n\n  return response;\n}\n","import * as React from 'react';\nimport { FormikContext } from './types';\n\nconst PrivateFormikContext = React.createContext<FormikContext<any>>({} as any);\nexport const FormikProvider = PrivateFormikContext.Provider;\nexport const FormikConsumer = PrivateFormikContext.Consumer;\n\nexport function useFormikContext<Values>() {\n  return React.useContext<FormikContext<Values>>(PrivateFormikContext);\n}\n","import * as React from 'react';\nimport isEqual from 'react-fast-compare';\nimport deepmerge from 'deepmerge';\nimport {\n  FormikConfig,\n  FormikErrors,\n  FormikState,\n  FormikTouched,\n  FormikValues,\n  FormikProps,\n  FieldMetaProps,\n  FieldInputProps,\n} from './types';\nimport {\n  isFunction,\n  isString,\n  setIn,\n  isEmptyChildren,\n  isPromise,\n  setNestedObjectValues,\n  getActiveElement,\n  getIn,\n} from './utils';\nimport { FormikProvider } from './FormikContext';\nimport invariant from 'tiny-warning';\nimport { LowPriority, unstable_runWithPriority } from 'scheduler';\n\n// We already used FormikActions. So we'll go all Elm-y, and use Message.\ntype FormikMessage<Values> =\n  | { type: 'SUBMIT_ATTEMPT' }\n  | { type: 'SUBMIT_FAILURE' }\n  | { type: 'SUBMIT_SUCCESS' }\n  | { type: 'SET_ISVALIDATING'; payload: boolean }\n  | { type: 'SET_ISSUBMITTING'; payload: boolean }\n  | { type: 'SET_VALUES'; payload: Values }\n  | { type: 'SET_FIELD_VALUE'; payload: { field: string; value?: any } }\n  | { type: 'SET_FIELD_TOUCHED'; payload: { field: string; value?: boolean } }\n  | { type: 'SET_FIELD_ERROR'; payload: { field: string; value?: string } }\n  | { type: 'SET_TOUCHED'; payload: FormikTouched<Values> }\n  | { type: 'SET_ERRORS'; payload: FormikErrors<Values> }\n  | { type: 'SET_STATUS'; payload: any }\n  | { type: 'SET_FORMIK_STATE'; payload: FormikState<Values> }\n  | { type: 'RESET_FORM'; payload: FormikState<Values> };\n\n// State reducer\nfunction formikReducer<Values>(\n  state: FormikState<Values>,\n  msg: FormikMessage<Values>\n) {\n  switch (msg.type) {\n    case 'SET_VALUES':\n      return { ...state, values: msg.payload };\n    case 'SET_TOUCHED':\n      return { ...state, touched: msg.payload };\n    case 'SET_ERRORS':\n      return { ...state, errors: msg.payload };\n    case 'SET_STATUS':\n      return { ...state, status: msg.payload };\n    case 'SET_ISSUBMITTING':\n      return { ...state, isSubmitting: msg.payload };\n    case 'SET_ISVALIDATING':\n      return { ...state, isValidating: msg.payload };\n    case 'SET_FIELD_VALUE':\n      return {\n        ...state,\n        values: setIn(state.values, msg.payload.field, msg.payload.value),\n      };\n    case 'SET_FIELD_TOUCHED':\n      return {\n        ...state,\n        touched: setIn(state.touched, msg.payload.field, msg.payload.value),\n      };\n    case 'SET_FIELD_ERROR':\n      return {\n        ...state,\n        errors: setIn(state.errors, msg.payload.field, msg.payload.value),\n      };\n    case 'RESET_FORM':\n    case 'SET_FORMIK_STATE':\n      return { ...state, ...msg.payload };\n    case 'SUBMIT_ATTEMPT':\n      return {\n        ...state,\n        touched: setNestedObjectValues<FormikTouched<Values>>(\n          state.values,\n          true\n        ),\n        isSubmitting: true,\n        submitCount: state.submitCount + 1,\n      };\n    case 'SUBMIT_FAILURE':\n      return {\n        ...state,\n        isSubmitting: false,\n      };\n    case 'SUBMIT_SUCCESS':\n      return {\n        ...state,\n        isSubmitting: false,\n      };\n    default:\n      return state;\n  }\n}\n\n// Initial empty states // objects\nconst emptyErrors: FormikErrors<any> = {};\nconst emptyTouched: FormikTouched<any> = {};\n\n// This is an object that contains a map of all registered fields\n// and their validate functions\ninterface FieldRegistry {\n  [field: string]: {\n    validate: (value: any) => string | Promise<string> | undefined;\n  };\n}\nconst emptyFieldRegistry: FieldRegistry = {};\n\nfunction useFormikInternal<Values = object>({\n  validateOnChange = true,\n  validateOnBlur = true,\n  isInitialValid,\n  enableReinitialize = false,\n  onSubmit,\n  ...rest\n}: FormikConfig<Values>) {\n  const props = { validateOnChange, validateOnBlur, onSubmit, ...rest };\n  const initialValues = React.useRef(props.initialValues);\n  const initialErrors = React.useRef(props.initialErrors || emptyErrors);\n  const initialTouched = React.useRef(props.initialTouched || emptyTouched);\n  const initialStatus = React.useRef(props.initialStatus);\n  const isMounted = React.useRef<boolean>(false);\n  const fieldRegistry = React.useRef<FieldRegistry>(emptyFieldRegistry);\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      invariant(\n        typeof isInitialValid === 'undefined',\n        'isInitialValid has been deprecated and will be removed in future versions of Formik. Please use initialErrors instead.'\n      );\n    }\n  }, [isInitialValid]);\n\n  React.useEffect(() => {\n    isMounted.current = true;\n\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  const [state, dispatch] = React.useReducer<\n    React.Reducer<FormikState<Values>, FormikMessage<Values>>\n  >(formikReducer, {\n    values: props.initialValues,\n    errors: props.initialErrors || {},\n    touched: props.initialTouched || {},\n    status: props.initialStatus,\n    isSubmitting: false,\n    isValidating: false,\n    submitCount: 0,\n  });\n\n  const runValidateHandler = React.useCallback(\n    (values: Values, field?: string): Promise<FormikErrors<Values>> => {\n      return new Promise(resolve => {\n        const maybePromisedErrors = (props.validate as any)(values, field);\n        if (maybePromisedErrors === undefined) {\n          resolve(emptyErrors);\n        } else if (isPromise(maybePromisedErrors)) {\n          (maybePromisedErrors as Promise<any>).then(\n            () => {\n              resolve(emptyErrors);\n            },\n            errors => {\n              resolve(errors);\n            }\n          );\n        } else {\n          resolve(maybePromisedErrors);\n        }\n      });\n    },\n    [props.validate]\n  );\n\n  /**\n   * Run validation against a Yup schema and optionally run a function if successful\n   */\n  const runValidationSchema = React.useCallback(\n    (values: Values, field?: string) => {\n      return new Promise(resolve => {\n        const validationSchema = props.validationSchema;\n        const schema = isFunction(validationSchema)\n          ? validationSchema(field)\n          : validationSchema;\n        let promise =\n          field && schema.validateAt\n            ? schema.validateAt(field, values)\n            : validateYupSchema(values, schema);\n        promise.then(\n          () => {\n            resolve(emptyErrors);\n          },\n          (err: any) => {\n            resolve(yupToFormErrors(err));\n          }\n        );\n      });\n    },\n    [props.validationSchema]\n  );\n\n  const runSingleFieldLevelValidation = React.useCallback(\n    (field: string, value: void | string): Promise<string> => {\n      return new Promise(resolve =>\n        resolve(fieldRegistry.current[field].validate(value))\n      );\n    },\n    []\n  );\n\n  const runFieldLevelValidations = React.useCallback(\n    (values: Values): Promise<FormikErrors<Values>> => {\n      const fieldKeysWithValidation: string[] = Object.keys(\n        fieldRegistry.current\n      ).filter(f => isFunction(fieldRegistry.current[f].validate));\n\n      // Construct an array with all of the field validation functions\n      const fieldValidations: Promise<string>[] =\n        fieldKeysWithValidation.length > 0\n          ? fieldKeysWithValidation.map(f =>\n              runSingleFieldLevelValidation(f, getIn(values, f))\n            )\n          : [Promise.resolve('DO_NOT_DELETE_YOU_WILL_BE_FIRED')]; // use special case ;)\n\n      return Promise.all(fieldValidations).then((fieldErrorsList: string[]) =>\n        fieldErrorsList.reduce((prev, curr, index) => {\n          if (curr === 'DO_NOT_DELETE_YOU_WILL_BE_FIRED') {\n            return prev;\n          }\n          if (curr) {\n            prev = setIn(prev, fieldKeysWithValidation[index], curr);\n          }\n          return prev;\n        }, {})\n      );\n    },\n    [runSingleFieldLevelValidation]\n  );\n\n  // Run all validations and return the result\n  const runAllValidations = React.useCallback(\n    (values: Values) => {\n      return Promise.all([\n        runFieldLevelValidations(values),\n        props.validationSchema ? runValidationSchema(values) : {},\n        props.validate ? runValidateHandler(values) : {},\n      ]).then(([fieldErrors, schemaErrors, validateErrors]) => {\n        const combinedErrors = deepmerge.all<FormikErrors<Values>>(\n          [fieldErrors, schemaErrors, validateErrors],\n          { arrayMerge }\n        );\n        return combinedErrors;\n      });\n    },\n    [\n      props.validate,\n      props.validationSchema,\n      runFieldLevelValidations,\n      runValidateHandler,\n      runValidationSchema,\n    ]\n  );\n\n  // Run validations and dispatching the result as low-priority via rAF.\n  //\n  // The thinking is that validation as a result of onChange and onBlur\n  // should never block user input. Note: This method should never be called\n  // during the submission phase because validation prior to submission\n  // is actaully high-priority since we absolutely need to guarantee the\n  // form is valid before executing props.onSubmit.\n  const validateFormWithLowPriority = useEventCallback(\n    (values: Values = state.values) => {\n      return unstable_runWithPriority(LowPriority, () => {\n        return runAllValidations(values).then(combinedErrors => {\n          if (!!isMounted.current) {\n            dispatch({ type: 'SET_ERRORS', payload: combinedErrors });\n          }\n          return combinedErrors;\n        });\n      });\n    },\n    [runAllValidations, state.values]\n  );\n\n  // Run all validations methods and update state accordingly\n  const validateFormWithHighPriority = useEventCallback(\n    (values: Values = state.values) => {\n      dispatch({ type: 'SET_ISVALIDATING', payload: true });\n      return runAllValidations(values).then(combinedErrors => {\n        if (!!isMounted.current) {\n          dispatch({ type: 'SET_ISVALIDATING', payload: false });\n          if (!isEqual(state.errors, combinedErrors)) {\n            dispatch({ type: 'SET_ERRORS', payload: combinedErrors });\n          }\n        }\n        return combinedErrors;\n      });\n    },\n    [state.values, state.errors, runAllValidations]\n  );\n\n  const resetForm = React.useCallback(\n    (nextState?: FormikState<Values>) => {\n      const values =\n        nextState && nextState.values\n          ? nextState.values\n          : initialValues.current;\n      const errors =\n        nextState && nextState.errors\n          ? nextState.errors\n          : initialErrors.current\n          ? initialErrors.current\n          : props.initialErrors || {};\n      const touched =\n        nextState && nextState.touched\n          ? nextState.touched\n          : initialTouched.current\n          ? initialTouched.current\n          : props.initialTouched || {};\n      const status =\n        nextState && nextState.status\n          ? nextState.status\n          : initialStatus.current\n          ? initialStatus.current\n          : props.initialStatus;\n      initialValues.current = values;\n      initialErrors.current = errors;\n      initialTouched.current = touched;\n      initialStatus.current = status;\n\n      dispatch({\n        type: 'RESET_FORM',\n        payload: {\n          isSubmitting: !!nextState && !!nextState.isSubmitting,\n          errors,\n          touched,\n          status,\n          values,\n          isValidating: !!nextState && !!nextState.isValidating,\n          submitCount:\n            !!nextState &&\n            !!nextState.submitCount &&\n            typeof nextState.submitCount === 'number'\n              ? nextState.submitCount\n              : 0,\n        },\n      });\n    },\n    [\n      props.initialErrors,\n      props.initialStatus,\n      props.initialTouched,\n      props.initialValues,\n    ]\n  );\n\n  React.useEffect(() => {\n    if (\n      enableReinitialize &&\n      isMounted.current === true &&\n      !isEqual(initialValues.current, props.initialValues)\n    ) {\n      initialValues.current = props.initialValues;\n      resetForm();\n    }\n  }, [enableReinitialize, props.initialValues, resetForm]);\n\n  const validateField = useEventCallback(\n    (name: string) => {\n      // This will efficiently validate a single field by avoiding state\n      // changes if the validation function is synchronous. It's different from\n      // what is called when using validateForm.\n\n      if (isFunction(fieldRegistry.current[name].validate)) {\n        const value = getIn(state.values, name);\n        const maybePromise = fieldRegistry.current[name].validate(value);\n        if (isPromise(maybePromise)) {\n          // Only flip isValidating if the function is async.\n          dispatch({ type: 'SET_ISVALIDATING', payload: true });\n          return maybePromise\n            .then((x: any) => x, (e: any) => e)\n            .then((error: string) => {\n              dispatch({\n                type: 'SET_FIELD_ERROR',\n                payload: { field: name, value: error },\n              });\n              dispatch({ type: 'SET_ISVALIDATING', payload: false });\n            });\n        } else {\n          dispatch({\n            type: 'SET_FIELD_ERROR',\n            payload: {\n              field: name,\n              value: maybePromise as string | undefined,\n            },\n          });\n          return Promise.resolve(maybePromise as string | undefined);\n        }\n      } else {\n        return Promise.resolve();\n      }\n    },\n    [state.values]\n  );\n\n  const registerField = React.useCallback((name: string, { validate }: any) => {\n    fieldRegistry.current[name] = {\n      validate,\n    };\n  }, []);\n\n  const unregisterField = React.useCallback((name: string) => {\n    delete fieldRegistry.current[name];\n  }, []);\n\n  const setTouched = useEventCallback(\n    (touched: FormikTouched<Values>) => {\n      dispatch({ type: 'SET_TOUCHED', payload: touched });\n      return validateOnBlur\n        ? validateFormWithLowPriority(state.values)\n        : Promise.resolve();\n    },\n    [validateFormWithLowPriority, state.values, validateOnBlur]\n  );\n\n  const setErrors = React.useCallback((errors: FormikErrors<Values>) => {\n    dispatch({ type: 'SET_ERRORS', payload: errors });\n  }, []);\n\n  const setValues = useEventCallback(\n    (values: Values) => {\n      dispatch({ type: 'SET_VALUES', payload: values });\n      return validateOnChange\n        ? validateFormWithLowPriority(state.values)\n        : Promise.resolve();\n    },\n    [validateFormWithLowPriority, state.values, validateOnChange]\n  );\n\n  const setFieldError = React.useCallback(\n    (field: string, value: string | undefined) => {\n      dispatch({\n        type: 'SET_FIELD_ERROR',\n        payload: { field, value },\n      });\n    },\n    []\n  );\n\n  const setFieldValue = useEventCallback(\n    (field: string, value: any, shouldValidate: boolean = true) => {\n      dispatch({\n        type: 'SET_FIELD_VALUE',\n        payload: {\n          field,\n          value,\n        },\n      });\n      return validateOnChange && shouldValidate\n        ? validateFormWithLowPriority(setIn(state.values, field, value))\n        : Promise.resolve();\n    },\n    [validateFormWithLowPriority, state.values, validateOnChange]\n  );\n\n  const executeChange = React.useCallback(\n    (eventOrTextValue: string | React.ChangeEvent<any>, maybePath?: string) => {\n      // By default, assume that the first argument is a string. This allows us to use\n      // handleChange with React Native and React Native Web's onChangeText prop which\n      // provides just the value of the input.\n      let field = maybePath;\n      let val = eventOrTextValue;\n      let parsed;\n      // If the first argument is not a string though, it has to be a synthetic React Event (or a fake one),\n      // so we handle like we would a normal HTML change event.\n      if (!isString(eventOrTextValue)) {\n        // If we can, persist the event\n        // @see https://reactjs.org/docs/events.html#event-pooling\n        if ((eventOrTextValue as React.ChangeEvent<any>).persist) {\n          (eventOrTextValue as React.ChangeEvent<any>).persist();\n        }\n        const {\n          type,\n          name,\n          id,\n          value,\n          checked,\n          outerHTML,\n        } = (eventOrTextValue as React.ChangeEvent<any>).target;\n        field = maybePath ? maybePath : name ? name : id;\n        if (!field && process.env.NODE_ENV !== 'production') {\n          warnAboutMissingIdentifier({\n            htmlContent: outerHTML,\n            documentationAnchorLink: 'handlechange-e-reactchangeeventany--void',\n            handlerName: 'handleChange',\n          });\n        }\n        val = /number|range/.test(type)\n          ? ((parsed = parseFloat(value)), isNaN(parsed) ? '' : parsed)\n          : /checkbox/.test(type)\n          ? checked\n          : value;\n      }\n\n      if (field) {\n        // Set form fields by name\n        setFieldValue(field, val);\n      }\n    },\n    [setFieldValue]\n  );\n\n  const handleChange = React.useCallback(\n    (\n      eventOrPath: string | React.ChangeEvent<any>\n    ): void | ((eventOrTextValue: string | React.ChangeEvent<any>) => void) => {\n      if (isString(eventOrPath)) {\n        return event => executeChange(event, eventOrPath);\n      } else {\n        executeChange(eventOrPath);\n      }\n    },\n    [executeChange]\n  );\n\n  const setFieldTouched = useEventCallback(\n    (\n      field: string,\n      touched: boolean = true,\n      shouldValidate: boolean = true\n    ) => {\n      dispatch({\n        type: 'SET_FIELD_TOUCHED',\n        payload: {\n          field,\n          value: touched,\n        },\n      });\n      return validateOnBlur && shouldValidate\n        ? validateFormWithLowPriority(state.values)\n        : Promise.resolve();\n    },\n    [validateFormWithLowPriority, state.values, validateOnBlur]\n  );\n\n  const executeBlur = React.useCallback(\n    (e: any, path?: string) => {\n      if (e.persist) {\n        e.persist();\n      }\n      const { name, id, outerHTML } = e.target;\n      const field = path ? path : name ? name : id;\n\n      if (!field && process.env.NODE_ENV !== 'production') {\n        warnAboutMissingIdentifier({\n          htmlContent: outerHTML,\n          documentationAnchorLink: 'handleblur-e-any--void',\n          handlerName: 'handleBlur',\n        });\n      }\n\n      setFieldTouched(field, true);\n    },\n    [setFieldTouched]\n  );\n\n  const handleBlur = React.useCallback(\n    (eventOrString: any): void | ((e: any) => void) => {\n      if (isString(eventOrString)) {\n        return event => executeBlur(event, eventOrString);\n      } else {\n        executeBlur(eventOrString);\n      }\n    },\n    [executeBlur]\n  );\n\n  function setFormikState(\n    stateOrCb:\n      | FormikState<Values>\n      | ((state: FormikState<Values>) => FormikState<Values>)\n  ): void {\n    if (isFunction(stateOrCb)) {\n      dispatch({ type: 'SET_FORMIK_STATE', payload: stateOrCb(state) });\n    } else {\n      dispatch({ type: 'SET_FORMIK_STATE', payload: stateOrCb });\n    }\n  }\n\n  const setStatus = React.useCallback((status: any) => {\n    dispatch({ type: 'SET_STATUS', payload: status });\n  }, []);\n\n  const setSubmitting = React.useCallback((isSubmitting: boolean) => {\n    dispatch({ type: 'SET_ISSUBMITTING', payload: isSubmitting });\n  }, []);\n\n  const imperativeMethods = {\n    resetForm,\n\n    validateForm: validateFormWithHighPriority,\n    validateField,\n    setErrors,\n    setFieldError,\n    setFieldTouched,\n    setFieldValue,\n    setStatus,\n    setSubmitting,\n    setTouched,\n    setValues,\n    setFormikState,\n  };\n\n  const executeSubmit = useEventCallback(() => {\n    return onSubmit(state.values, imperativeMethods);\n  }, [imperativeMethods, onSubmit, state.values]);\n\n  const submitForm = useEventCallback(() => {\n    dispatch({ type: 'SUBMIT_ATTEMPT' });\n    return validateFormWithHighPriority().then(\n      (combinedErrors: FormikErrors<Values>) => {\n        const isActuallyValid = Object.keys(combinedErrors).length === 0;\n        if (isActuallyValid) {\n          return Promise.resolve(executeSubmit())\n            .then(() => {\n              if (!!isMounted.current) {\n                dispatch({ type: 'SUBMIT_SUCCESS' });\n              }\n            })\n            .catch(_errors => {\n              if (!!isMounted.current) {\n                dispatch({ type: 'SUBMIT_FAILURE' });\n              }\n            });\n        } else if (!!isMounted.current) {\n          // ^^^ Make sure Formik is still mounted before calling setState\n          dispatch({ type: 'SUBMIT_FAILURE' });\n          return;\n        }\n        return;\n      }\n    );\n  }, [executeSubmit, validateFormWithHighPriority]);\n\n  const handleSubmit = useEventCallback(\n    (e?: React.FormEvent<HTMLFormElement>) => {\n      if (e && e.preventDefault && isFunction(e.preventDefault)) {\n        e.preventDefault();\n      }\n\n      if (e && e.stopPropagation && isFunction(e.stopPropagation)) {\n        e.stopPropagation();\n      }\n\n      // Warn if form submission is triggered by a <button> without a\n      // specified `type` attribute during development. This mitigates\n      // a common gotcha in forms with both reset and submit buttons,\n      // where the dev forgets to add type=\"button\" to the reset button.\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        typeof document !== 'undefined'\n      ) {\n        // Safely get the active element (works with IE)\n        const activeElement = getActiveElement();\n        if (\n          activeElement !== null &&\n          activeElement instanceof HTMLButtonElement\n        ) {\n          invariant(\n            activeElement.attributes &&\n              activeElement.attributes.getNamedItem('type'),\n            'You submitted a Formik form using a button with an unspecified `type` attribute.  Most browsers default button elements to `type=\"submit\"`. If this is not a submit button, please add `type=\"button\"`.'\n          );\n        }\n      }\n\n      submitForm();\n    },\n    [submitForm]\n  );\n  const handleReset = useEventCallback(() => {\n    if (props.onReset) {\n      const maybePromisedOnReset = (props.onReset as any)(\n        state.values,\n        imperativeMethods\n      );\n\n      if (isPromise(maybePromisedOnReset)) {\n        (maybePromisedOnReset as Promise<any>).then(resetForm);\n      } else {\n        resetForm();\n      }\n    } else {\n      resetForm();\n    }\n  }, [imperativeMethods, props.onReset, resetForm, state.values]);\n\n  const getFieldMeta = React.useCallback(\n    (name: string) => {\n      return {\n        value: getIn(state.values, name),\n        error: getIn(state.errors, name),\n        touched: !!getIn(state.touched, name),\n        initialValue: getIn(initialValues.current, name),\n        initialTouched: !!getIn(initialTouched.current, name),\n        initialError: getIn(initialErrors.current, name),\n      };\n    },\n    [state.errors, state.touched, state.values]\n  );\n\n  const getFieldProps = React.useCallback(\n    (\n      name: string,\n      type: string\n    ): [FieldInputProps<any>, FieldMetaProps<any>] => {\n      const field = {\n        name,\n        value:\n          type && (type === 'radio' || type === 'checkbox')\n            ? undefined // React uses checked={} for these inputs\n            : getIn(state.values, name),\n        onChange: handleChange,\n        onBlur: handleBlur,\n      };\n\n      return [field, getFieldMeta(name)];\n    },\n    [getFieldMeta, handleBlur, handleChange, state.values]\n  );\n\n  const dirty = React.useMemo(\n    () => !isEqual(initialValues.current, state.values),\n    [state.values]\n  );\n\n  const isValid = React.useMemo(\n    () =>\n      typeof isInitialValid !== 'undefined'\n        ? dirty\n          ? state.errors && Object.keys(state.errors).length === 0\n          : isInitialValid !== false && isFunction(isInitialValid)\n          ? (isInitialValid as (props: FormikConfig<Values>) => boolean)(props)\n          : (isInitialValid as boolean)\n        : state.errors && Object.keys(state.errors).length === 0,\n    [isInitialValid, dirty, state.errors, props]\n  );\n\n  const ctx = {\n    ...state,\n    initialValues: initialValues.current,\n    initialErrors: initialErrors.current,\n    initialTouched: initialTouched.current,\n    initialStatus: initialStatus.current,\n    handleBlur,\n    handleChange,\n    handleReset,\n    handleSubmit,\n    resetForm,\n    setErrors,\n    setFormikState,\n    setFieldTouched,\n    setFieldValue,\n    setFieldError,\n    setStatus,\n    setSubmitting,\n    setTouched,\n    setValues,\n    submitForm,\n    validateForm: validateFormWithHighPriority,\n    validateField,\n    isValid,\n    dirty,\n    unregisterField,\n    registerField,\n    getFieldProps,\n    validateOnBlur,\n    validateOnChange,\n  };\n\n  return ctx;\n}\n\nexport function Formik<Values = object, ExtraProps = {}>(\n  props: FormikConfig<Values> & ExtraProps\n) {\n  const formikbag = useFormikInternal<Values>(props);\n  const { component, children, render } = props;\n  return (\n    <FormikProvider value={formikbag}>\n      {component\n        ? React.createElement(component as any, formikbag)\n        : render\n        ? render(formikbag)\n        : children // children come last, always called\n        ? isFunction(children)\n          ? (children as ((bag: FormikProps<Values>) => React.ReactNode))(\n              formikbag as FormikProps<Values>\n            )\n          : !isEmptyChildren(children)\n          ? React.Children.only(children)\n          : null\n        : null}\n    </FormikProvider>\n  );\n}\n\nfunction warnAboutMissingIdentifier({\n  htmlContent,\n  documentationAnchorLink,\n  handlerName,\n}: {\n  htmlContent: string;\n  documentationAnchorLink: string;\n  handlerName: string;\n}) {\n  console.warn(\n    `Warning: Formik called \\`${handlerName}\\`, but you forgot to pass an \\`id\\` or \\`name\\` attribute to your input:\n    ${htmlContent}\n    Formik cannot determine which value to update. For more info see https://github.com/jaredpalmer/formik#${documentationAnchorLink}\n  `\n  );\n}\n\n/**\n * Transform Yup ValidationError to a more usable object\n */\nexport function yupToFormErrors<Values>(yupError: any): FormikErrors<Values> {\n  let errors: FormikErrors<Values> = {};\n  if (yupError.inner.length === 0) {\n    return setIn(errors, yupError.path, yupError.message);\n  }\n  for (let err of yupError.inner) {\n    if (!(errors as any)[err.path]) {\n      errors = setIn(errors, err.path, err.message);\n    }\n  }\n  return errors;\n}\n\n/**\n * Validate a yup schema.\n */\nexport function validateYupSchema<T extends FormikValues>(\n  values: T,\n  schema: any,\n  sync: boolean = false,\n  context: any = {}\n): Promise<Partial<T>> {\n  let validateData: Partial<T> = {};\n  for (let k in values) {\n    if (values.hasOwnProperty(k)) {\n      const key = String(k);\n      validateData[key] = values[key] !== '' ? values[key] : undefined;\n    }\n  }\n  return schema[sync ? 'validateSync' : 'validate'](validateData, {\n    abortEarly: false,\n    context: context,\n  });\n}\n\n/**\n * deepmerge array merging algorithm\n * https://github.com/KyleAMathews/deepmerge#combine-array\n */\nfunction arrayMerge(target: any[], source: any[], options: any): any[] {\n  const destination = target.slice();\n\n  source.forEach(function(e: any, i: number) {\n    if (typeof destination[i] === 'undefined') {\n      const cloneRequested = options.clone !== false;\n      const shouldClone = cloneRequested && options.isMergeableObject(e);\n      destination[i] = shouldClone\n        ? deepmerge(Array.isArray(e) ? [] : {}, e, options)\n        : e;\n    } else if (options.isMergeableObject(e)) {\n      destination[i] = deepmerge(target[i], e, options);\n    } else if (target.indexOf(e) === -1) {\n      destination.push(e);\n    }\n  });\n  return destination;\n}\n\nfunction useEventCallback<T extends (...args: any[]) => any>(\n  fn: T,\n  dependencies: React.DependencyList\n): T {\n  const ref: any = React.useRef(() => {\n    throw new Error('Cannot call an event handler while rendering.');\n  });\n\n  React.useEffect(() => {\n    ref.current = fn;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [fn, ...dependencies]);\n\n  return React.useCallback<any>(\n    (...argz: any[]) => {\n      const fn = ref.current;\n      return fn(...argz);\n    },\n    [ref]\n  ) as T;\n}\n","import * as React from 'react';\nimport {\n  FormikProps,\n  GenericFieldHTMLAttributes,\n  FieldMetaProps,\n  FieldInputProps,\n} from './types';\nimport { useFormikContext } from './FormikContext';\nimport { isFunction, isEmptyChildren } from './utils';\nimport invariant from 'tiny-warning';\n\nexport interface FieldProps<V = any> {\n  field: FieldInputProps<V>;\n  form: FormikProps<V>; // if ppl want to restrict this for a given form, let them.\n  meta: FieldMetaProps<V>;\n}\n\nexport interface FieldConfig {\n  /**\n   * Field component to render. Can either be a string like 'select' or a component.\n   * @deprecated\n   */\n  component?:\n    | string\n    | React.ComponentType<FieldProps<any>>\n    | React.ComponentType;\n\n  /**\n   * Component to render. Can either be a string e.g. 'select', 'input', or 'textarea', or a component.\n   */\n  as?:\n    | React.ComponentType<FieldProps<any>['field']>\n    | keyof JSX.IntrinsicElements\n    | React.ComponentType;\n\n  /**\n   * Render prop (works like React router's <Route render={props =>} />)\n   * @deprecated\n   */\n  render?: (props: FieldProps<any>) => React.ReactNode;\n\n  /**\n   * Children render function <Field name>{props => ...}</Field>)\n   */\n  children?: ((props: FieldProps<any>) => React.ReactNode) | React.ReactNode;\n\n  /**\n   * Validate a single field value independently\n   */\n  validate?: (value: any) => string | Promise<void> | undefined;\n\n  /**\n   * Field name\n   */\n  name: string;\n\n  /** HTML input type */\n  type?: string;\n\n  /** Field value */\n  value?: any;\n\n  /** Inner ref */\n  innerRef?: (instance: any) => void;\n}\n\nexport type FieldAttributes<T> = GenericFieldHTMLAttributes & FieldConfig & T;\n\nexport function useField<Val = any>(name: string, type?: string) {\n  const formik = useFormikContext();\n  if (process.env.NODE_ENV !== 'production') {\n    invariant(\n      formik,\n      'useField() / <Field /> must be used underneath a <Formik> component or withFormik() higher order component'\n    );\n  }\n  return formik.getFieldProps<Val>(name, type);\n}\n\nexport function Field({\n  validate,\n  name,\n  render,\n  children,\n  as: is, // `as` is reserved in typescript lol\n  component,\n  ...props\n}: FieldAttributes<any>) {\n  const {\n    validate: _validate,\n    validationSchema: _validationSchema,\n    ...formik\n  } = useFormikContext();\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      invariant(\n        !render,\n        `<Field render> has been deprecated and will be removed in future versions of Formik. Please use a child callback function instead. To get rid of this warning, replace <Field name=\"${name}\" render={({field, form}) => ...} /> with <Field name=\"${name}\">{({field, form, meta}) => ...}</Field>`\n      );\n\n      invariant(\n        !component,\n        '<Field component> has been deprecated and will be removed in future versions of Formik. Use <Field as> instead. Note that with the `as` prop, all props are passed directly through and not grouped in `field` object key.'\n      );\n\n      invariant(\n        !(is && children && isFunction(children)),\n        'You should not use <Field as> and <Field children> as a function in the same <Field> component; <Field as> will be ignored.'\n      );\n\n      invariant(\n        !(component && children && isFunction(children)),\n        'You should not use <Field component> and <Field children> as a function in the same <Field> component; <Field component> will be ignored.'\n      );\n\n      invariant(\n        !(render && children && !isEmptyChildren(children)),\n        'You should not use <Field render> and <Field children> in the same <Field> component; <Field children> will be ignored'\n      );\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  React.useEffect(() => {\n    formik.registerField(name, {\n      validate: validate,\n    });\n    return () => {\n      formik.unregisterField(name);\n    };\n  }, [formik, name, validate]);\n  const [field, meta] = formik.getFieldProps(name, props.type);\n  const legacyBag = { field, form: formik };\n\n  if (render) {\n    return render(legacyBag);\n  }\n\n  if (isFunction(children)) {\n    return children({ ...legacyBag, meta });\n  }\n\n  if (component) {\n    // This behavior is backwards compat with earlier Formik 0.9 to 1.x\n    if (typeof component === 'string') {\n      const { innerRef, ...rest } = props;\n      return React.createElement(\n        component,\n        { ref: innerRef, ...field, ...rest },\n        children\n      );\n    }\n    // We don't pass `meta` for backwards compat\n    return React.createElement(\n      component,\n      { field, form: formik, ...props },\n      children\n    );\n  }\n\n  // default to input here so we can check for both `as` and `children` above\n  const asElement = is || 'input';\n\n  if (typeof asElement === 'string') {\n    const { innerRef, ...rest } = props;\n    return React.createElement(\n      asElement,\n      { ref: innerRef, ...field, ...rest },\n      children\n    );\n  }\n\n  return React.createElement(asElement, { ...field, ...props }, children);\n}\nexport const FastField = Field;\n","import * as React from 'react';\nimport { useFormikContext } from './FormikContext';\n\nexport type FormikFormProps = Pick<\n  React.FormHTMLAttributes<HTMLFormElement>,\n  Exclude<\n    keyof React.FormHTMLAttributes<HTMLFormElement>,\n    'onReset' | 'onSubmit'\n  >\n>;\n\nexport function Form(props: FormikFormProps) {\n  const { handleReset, handleSubmit } = useFormikContext();\n  return <form onSubmit={handleSubmit} onReset={handleReset} {...props} />;\n}\n\nForm.displayName = 'Form';\n","import * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\n\nimport { FormikContext } from './types';\nimport { FormikConsumer } from './FormikContext';\n\n/**\n * Connect any component to Formik context, and inject as a prop called `formik`;\n * @param Comp React Component\n */\nexport function connect<OuterProps, Values = {}>(\n  Comp: React.ComponentType<OuterProps & { formik: FormikContext<Values> }>\n) {\n  const C: React.SFC<OuterProps> = (props: OuterProps) => (\n    <FormikConsumer>\n      {formik => <Comp {...props} formik={formik} />}\n    </FormikConsumer>\n  );\n  const componentDisplayName =\n    Comp.displayName ||\n    Comp.name ||\n    (Comp.constructor && Comp.constructor.name) ||\n    'Component';\n\n  // Assign Comp to C.WrappedComponent so we can access the inner component in tests\n  // For example, <Field.WrappedComponent /> gets us <FieldInner/>\n  (C as React.SFC<OuterProps> & {\n    WrappedComponent: React.ReactNode;\n  }).WrappedComponent = Comp;\n\n  C.displayName = `FormikConnect(${componentDisplayName})`;\n\n  return hoistNonReactStatics(\n    C,\n    Comp as React.ComponentClass<OuterProps & { formik: FormikContext<Values> }> // cast type to ComponentClass (even if SFC)\n  ) as React.ComponentType<OuterProps>;\n}\n","import * as React from 'react';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { connect } from './connect';\nimport {\n  FormikContext,\n  FormikState,\n  SharedRenderProps,\n  FormikProps,\n} from './types';\nimport { getIn, isEmptyChildren, isFunction, setIn } from './utils';\n\nexport type FieldArrayRenderProps = ArrayHelpers & {\n  form: FormikProps<any>;\n  name: string;\n};\n\nexport type FieldArrayConfig = {\n  /** Really the path to the array field to be updated */\n  name: string;\n  /** Should field array validate the form AFTER array updates/changes? */\n  validateOnChange?: boolean;\n} & SharedRenderProps<FieldArrayRenderProps>;\nexport interface ArrayHelpers {\n  /** Imperatively add a value to the end of an array */\n  push: (obj: any) => void;\n  /** Curried fn to add a value to the end of an array */\n  handlePush: (obj: any) => () => void;\n  /** Imperatively swap two values in an array */\n  swap: (indexA: number, indexB: number) => void;\n  /** Curried fn to swap two values in an array */\n  handleSwap: (indexA: number, indexB: number) => () => void;\n  /** Imperatively move an element in an array to another index */\n  move: (from: number, to: number) => void;\n  /** Imperatively move an element in an array to another index */\n  handleMove: (from: number, to: number) => () => void;\n  /** Imperatively insert an element at a given index into the array */\n  insert: (index: number, value: any) => void;\n  /** Curried fn to insert an element at a given index into the array */\n  handleInsert: (index: number, value: any) => () => void;\n  /** Imperatively replace a value at an index of an array  */\n  replace: (index: number, value: any) => void;\n  /** Curried fn to replace an element at a given index into the array */\n  handleReplace: (index: number, value: any) => () => void;\n  /** Imperatively add an element to the beginning of an array and return its length */\n  unshift: (value: any) => number;\n  /** Curried fn to add an element to the beginning of an array */\n  handleUnshift: (value: any) => () => void;\n  /** Curried fn to remove an element at an index of an array */\n  handleRemove: (index: number) => () => void;\n  /** Curried fn to remove a value from the end of the array */\n  handlePop: () => () => void;\n  /** Imperatively remove and element at an index of an array */\n  remove<T>(index: number): T | undefined;\n  /** Imperatively remove and return value from the end of the array */\n  pop<T>(): T | undefined;\n}\n\n/**\n * Some array helpers!\n */\nexport const move = (array: any[], from: number, to: number) => {\n  const copy = [...(array || [])];\n  const value = copy[from];\n  copy.splice(from, 1);\n  copy.splice(to, 0, value);\n  return copy;\n};\n\nexport const swap = (array: any[], indexA: number, indexB: number) => {\n  const copy = [...(array || [])];\n  const a = copy[indexA];\n  copy[indexA] = copy[indexB];\n  copy[indexB] = a;\n  return copy;\n};\n\nexport const insert = (array: any[], index: number, value: any) => {\n  const copy = [...(array || [])];\n  copy.splice(index, 0, value);\n  return copy;\n};\n\nexport const replace = (array: any[], index: number, value: any) => {\n  const copy = [...(array || [])];\n  copy[index] = value;\n  return copy;\n};\nclass FieldArrayInner<Values = {}> extends React.Component<\n  FieldArrayConfig & { formik: FormikContext<Values> },\n  {}\n> {\n  static defaultProps = {\n    validateOnChange: true,\n  };\n\n  constructor(props: FieldArrayConfig & { formik: FormikContext<Values> }) {\n    super(props);\n    // We need TypeScript generics on these, so we'll bind them in the constructor\n    // @todo Fix TS 3.2.1\n    this.remove = this.remove.bind(this) as any;\n    this.pop = this.pop.bind(this) as any;\n  }\n\n  updateArrayField = (\n    fn: Function,\n    alterTouched: boolean | Function,\n    alterErrors: boolean | Function\n  ) => {\n    const {\n      name,\n      validateOnChange,\n      formik: { setFormikState, validateForm },\n    } = this.props;\n    setFormikState(\n      (prevState: FormikState<any>) => {\n        let updateErrors = typeof alterErrors === 'function' ? alterErrors : fn;\n        let updateTouched =\n          typeof alterTouched === 'function' ? alterTouched : fn;\n\n        return {\n          ...prevState,\n          values: setIn(\n            prevState.values,\n            name,\n            fn(getIn(prevState.values, name))\n          ),\n          errors: alterErrors\n            ? setIn(\n                prevState.errors,\n                name,\n                updateErrors(getIn(prevState.errors, name))\n              )\n            : prevState.errors,\n          touched: alterTouched\n            ? setIn(\n                prevState.touched,\n                name,\n                updateTouched(getIn(prevState.touched, name))\n              )\n            : prevState.touched,\n        };\n      },\n      () => {\n        if (validateOnChange) {\n          validateForm();\n        }\n      }\n    );\n  };\n\n  push = (value: any) =>\n    this.updateArrayField(\n      (array: any[]) => [...(array || []), cloneDeep(value)],\n      false,\n      false\n    );\n\n  handlePush = (value: any) => () => this.push(value);\n\n  swap = (indexA: number, indexB: number) =>\n    this.updateArrayField(\n      (array: any[]) => swap(array, indexA, indexB),\n      true,\n      true\n    );\n\n  handleSwap = (indexA: number, indexB: number) => () =>\n    this.swap(indexA, indexB);\n\n  move = (from: number, to: number) =>\n    this.updateArrayField((array: any[]) => move(array, from, to), true, true);\n\n  handleMove = (from: number, to: number) => () => this.move(from, to);\n\n  insert = (index: number, value: any) =>\n    this.updateArrayField(\n      (array: any[]) => insert(array, index, value),\n      (array: any[]) => insert(array, index, null),\n      (array: any[]) => insert(array, index, null)\n    );\n\n  handleInsert = (index: number, value: any) => () => this.insert(index, value);\n\n  replace = (index: number, value: any) =>\n    this.updateArrayField(\n      (array: any[]) => replace(array, index, value),\n      false,\n      false\n    );\n\n  handleReplace = (index: number, value: any) => () =>\n    this.replace(index, value);\n\n  unshift = (value: any) => {\n    let length = -1;\n    this.updateArrayField(\n      (array: any[]) => {\n        const arr = array ? [value, ...array] : [value];\n        if (length < 0) {\n          length = arr.length;\n        }\n        return arr;\n      },\n      (array: any[]) => {\n        const arr = array ? [null, ...array] : [null];\n        if (length < 0) {\n          length = arr.length;\n        }\n        return arr;\n      },\n      (array: any[]) => {\n        const arr = array ? [null, ...array] : [null];\n        if (length < 0) {\n          length = arr.length;\n        }\n        return arr;\n      }\n    );\n    return length;\n  };\n\n  handleUnshift = (value: any) => () => this.unshift(value);\n\n  remove<T>(index: number): T {\n    // We need to make sure we also remove relevant pieces of `touched` and `errors`\n    let result: any;\n    this.updateArrayField(\n      // so this gets call 3 times\n      (array?: any[]) => {\n        const copy = array ? [...array] : [];\n        if (!result) {\n          result = copy[index];\n        }\n        if (isFunction(copy.splice)) {\n          copy.splice(index, 1);\n        }\n        return copy;\n      },\n      true,\n      true\n    );\n\n    return result as T;\n  }\n\n  handleRemove = (index: number) => () => this.remove<any>(index);\n\n  pop<T>(): T {\n    // Remove relevant pieces of `touched` and `errors` too!\n    let result: any;\n    this.updateArrayField(\n      // so this gets call 3 times\n      (array: any[]) => {\n        const tmp = array;\n        if (!result) {\n          result = tmp && tmp.pop && tmp.pop();\n        }\n        return tmp;\n      },\n      true,\n      true\n    );\n\n    return result as T;\n  }\n\n  handlePop = () => () => this.pop<any>();\n\n  render() {\n    const arrayHelpers: ArrayHelpers = {\n      push: this.push,\n      pop: this.pop,\n      swap: this.swap,\n      move: this.move,\n      insert: this.insert,\n      replace: this.replace,\n      unshift: this.unshift,\n      remove: this.remove,\n      handlePush: this.handlePush,\n      handlePop: this.handlePop,\n      handleSwap: this.handleSwap,\n      handleMove: this.handleMove,\n      handleInsert: this.handleInsert,\n      handleReplace: this.handleReplace,\n      handleUnshift: this.handleUnshift,\n      handleRemove: this.handleRemove,\n    };\n\n    const {\n      component,\n      render,\n      children,\n      name,\n      formik: {\n        validate: _validate,\n        validationSchema: _validationSchema,\n        ...restOfFormik\n      },\n    } = this.props;\n\n    const props: FieldArrayRenderProps = {\n      ...arrayHelpers,\n      form: restOfFormik,\n      name,\n    };\n\n    return component\n      ? React.createElement(component as any, props)\n      : render\n        ? (render as any)(props)\n        : children // children come last, always called\n          ? typeof children === 'function'\n            ? (children as any)(props)\n            : !isEmptyChildren(children) ? React.Children.only(children) : null\n          : null;\n  }\n}\n\nexport const FieldArray = connect<FieldArrayConfig, any>(FieldArrayInner);\n","import * as React from 'react';\nimport { FormikContext } from './types';\nimport { getIn, isFunction } from './utils';\nimport { connect } from './connect';\n\nexport interface ErrorMessageProps {\n  name: string;\n  className?: string;\n  component?: string | React.ComponentType;\n  children?: ((errorMessage: string) => React.ReactNode);\n  render?: ((errorMessage: string) => React.ReactNode);\n}\n\nclass ErrorMessageImpl extends React.Component<\n  ErrorMessageProps & { formik: FormikContext<any> }\n> {\n  shouldComponentUpdate(\n    props: ErrorMessageProps & { formik: FormikContext<any> }\n  ) {\n    if (\n      getIn(this.props.formik.errors, this.props.name) !==\n        getIn(props.formik.errors, this.props.name) ||\n      getIn(this.props.formik.touched, this.props.name) !==\n        getIn(props.formik.touched, this.props.name) ||\n      Object.keys(this.props).length !== Object.keys(props).length\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  render() {\n    let { component, formik, render, children, name, ...rest } = this.props;\n\n    const touch = getIn(formik.touched, name);\n    const error = getIn(formik.errors, name);\n\n    return !!touch && !!error\n      ? render\n        ? isFunction(render) ? render(error) : null\n        : children\n          ? isFunction(children) ? children(error) : null\n          : component\n            ? React.createElement(component, rest as any, error)\n            : error\n      : null;\n  }\n}\n\nexport const ErrorMessage = connect<\n  ErrorMessageProps,\n  ErrorMessageProps & { formik: FormikContext<any> }\n>(ErrorMessageImpl);\n","import hoistNonReactStatics from 'hoist-non-react-statics';\nimport * as React from 'react';\nimport { Formik } from './Formik';\nimport {\n  FormikHelpers,\n  FormikProps,\n  FormikSharedConfig,\n  FormikValues,\n  FormikTouched,\n  FormikErrors,\n} from './types';\nimport { isFunction } from './utils';\n\n/**\n * State, handlers, and helpers injected as props into the wrapped form component.\n * Used with withFormik()\n *\n * @deprecated  Use `OuterProps & FormikProps<Values>` instead.\n */\nexport type InjectedFormikProps<Props, Values> = Props & FormikProps<Values>;\n\n/**\n * Formik actions + { props }\n */\nexport type FormikBag<P, V> = { props: P } & FormikHelpers<V>;\n\n/**\n * withFormik() configuration options. Backwards compatible.\n */\nexport interface WithFormikConfig<\n  Props,\n  Values extends FormikValues = FormikValues,\n  DeprecatedPayload = Values\n> extends FormikSharedConfig<Props> {\n  /**\n   * Set the display name of the component. Useful for React DevTools.\n   */\n  displayName?: string;\n\n  /**\n   * Submission handler\n   */\n  handleSubmit: (values: Values, formikBag: FormikBag<Props, Values>) => void;\n\n  /**\n   * Map props to the form values\n   */\n  mapPropsToValues?: (props: Props) => Values;\n\n  /**\n   * Map props to the form values\n   */\n  mapPropsToStatus?: (props: Props) => any;\n\n  /**\n   * Map props to the form touched state\n   */\n  mapPropsToTouched?: (props: Props) => FormikTouched<Values>;\n\n  /**\n   * Map props to the form touched state\n   */\n  mapPropsToErrors?: (props: Props) => FormikErrors<Values>;\n\n  /**\n   * @deprecated in 0.9.0 (but needed to break TS types)\n   */\n  mapValuesToPayload?: (values: Values) => DeprecatedPayload;\n\n  /**\n   * A Yup Schema or a function that returns a Yup schema\n   */\n  validationSchema?: any | ((props: Props) => any);\n\n  /**\n   * Validation function. Must return an error object or promise that\n   * throws an error object where that object keys map to corresponding value.\n   */\n  validate?: (values: Values, props: Props) => void | object | Promise<any>;\n}\n\nexport type CompositeComponent<P> =\n  | React.ComponentClass<P>\n  | React.StatelessComponent<P>;\n\nexport interface ComponentDecorator<TOwnProps, TMergedProps> {\n  (component: CompositeComponent<TMergedProps>): React.ComponentType<TOwnProps>;\n}\n\nexport interface InferableComponentDecorator<TOwnProps> {\n  <T extends CompositeComponent<TOwnProps>>(component: T): T;\n}\n\n/**\n * A public higher-order component to access the imperative API\n */\nexport function withFormik<\n  OuterProps,\n  Values extends FormikValues,\n  Payload = Values\n>({\n  mapPropsToValues = (vanillaProps: OuterProps): Values => {\n    let val: Values = {} as Values;\n    for (let k in vanillaProps) {\n      if (\n        vanillaProps.hasOwnProperty(k) &&\n        typeof vanillaProps[k] !== 'function'\n      ) {\n        // @todo TypeScript fix\n        (val as any)[k] = vanillaProps[k];\n      }\n    }\n    return val as Values;\n  },\n  ...config\n}: WithFormikConfig<OuterProps, Values, Payload>): ComponentDecorator<\n  OuterProps,\n  OuterProps & FormikProps<Values>\n> {\n  return function createFormik(\n    Component: CompositeComponent<OuterProps & FormikProps<Values>>\n  ): React.ComponentClass<OuterProps> {\n    const componentDisplayName =\n      Component.displayName ||\n      Component.name ||\n      (Component.constructor && Component.constructor.name) ||\n      'Component';\n    /**\n     * We need to use closures here for to provide the wrapped component's props to\n     * the respective withFormik config methods.\n     */\n    class C extends React.Component<OuterProps, {}> {\n      static displayName = `WithFormik(${componentDisplayName})`;\n\n      validate = (values: Values): void | object | Promise<any> => {\n        return config.validate!(values, this.props);\n      };\n\n      validationSchema = () => {\n        return isFunction(config.validationSchema)\n          ? config.validationSchema!(this.props)\n          : config.validationSchema;\n      };\n\n      handleSubmit = (values: Values, actions: FormikHelpers<Values>) => {\n        return config.handleSubmit(values, {\n          ...actions,\n          props: this.props,\n        });\n      };\n\n      /**\n       * Just avoiding a render callback for perf here\n       */\n      renderFormComponent = (formikProps: FormikProps<Values>) => {\n        return <Component {...this.props} {...formikProps} />;\n      };\n\n      render() {\n        const { children, ...props } = this.props as any;\n        return (\n          <Formik\n            {...props}\n            {...config}\n            validate={config.validate && this.validate}\n            validationSchema={config.validationSchema && this.validationSchema}\n            initialValues={mapPropsToValues(this.props)}\n            initialStatus={\n              config.mapPropsToStatus && config.mapPropsToStatus(this.props)\n            }\n            initialErrors={\n              config.mapPropsToErrors && config.mapPropsToErrors(this.props)\n            }\n            initialTouched={\n              config.mapPropsToTouched && config.mapPropsToTouched(this.props)\n            }\n            onSubmit={this.handleSubmit as any}\n            render={this.renderFormComponent}\n          />\n        );\n      }\n    }\n\n    return hoistNonReactStatics(\n      C,\n      Component as React.ComponentClass<OuterProps & FormikProps<Values>> // cast type to ComponentClass (even if SFC)\n    ) as React.ComponentClass<OuterProps>;\n  };\n}\n"],"names":["isFunction","obj","isObject","isInteger","String","Math","floor","Number","isString","Object","prototype","toString","call","isEmptyChildren","children","React","count","isPromise","value","then","getIn","key","def","p","path","toPath","length","undefined","setIn","res","clone","resVal","i","pathArray","currentPath","currentObj","slice","nextPath","setNestedObjectValues","object","visited","response","WeakMap","keys","k","val","get","set","Array","isArray","PrivateFormikContext","FormikProvider","Provider","FormikConsumer","Consumer","useFormikContext","formikReducer","state","msg","type","values","payload","touched","errors","status","isSubmitting","isValidating","field","submitCount","emptyErrors","emptyTouched","emptyFieldRegistry","Formik","props","formikbag","validateOnChange","validateOnBlur","isInitialValid","enableReinitialize","onSubmit","rest","initialValues","initialErrors","initialTouched","initialStatus","isMounted","fieldRegistry","current","dispatch","runValidateHandler","Promise","resolve","maybePromisedErrors","validate","runValidationSchema","validationSchema","schema","validateAt","validateYupSchema","err","yupToFormErrors","runSingleFieldLevelValidation","runFieldLevelValidations","fieldKeysWithValidation","filter","f","fieldValidations","map","all","fieldErrorsList","reduce","prev","curr","index","runAllValidations","deepmerge","arrayMerge","validateFormWithLowPriority","useEventCallback","unstable_runWithPriority","LowPriority","combinedErrors","validateFormWithHighPriority","isEqual","resetForm","nextState","validateField","name","maybePromise","x","e","error","registerField","unregisterField","setTouched","setErrors","setValues","setFieldError","setFieldValue","shouldValidate","executeChange","eventOrTextValue","maybePath","parsed","persist","target","checked","id","test","parseFloat","isNaN","handleChange","eventOrPath","event","setFieldTouched","executeBlur","handleBlur","eventOrString","setFormikState","stateOrCb","setStatus","setSubmitting","imperativeMethods","validateForm","executeSubmit","submitForm","_errors","handleSubmit","preventDefault","stopPropagation","handleReset","onReset","maybePromisedOnReset","getFieldMeta","initialValue","initialError","getFieldProps","onChange","onBlur","dirty","isValid","useFormikInternal","component","render","only","yupError","inner","message","sync","context","validateData","hasOwnProperty","abortEarly","source","options","destination","forEach","shouldClone","isMergeableObject","indexOf","push","fn","dependencies","ref","Error","Field","is","as","formik","meta","legacyBag","form","innerRef","asElement","FastField","Form","connect","Comp","C","componentDisplayName","displayName","constructor","WrappedComponent","hoistNonReactStatics","move","array","from","to","copy","splice","swap","indexA","indexB","a","insert","replace","FieldArrayInner","alterTouched","alterErrors","_this","prevState","updateErrors","updateTouched","updateArrayField","cloneDeep","arr","unshift","remove","pop","bind","result","tmp","this","handlePush","handlePop","handleSwap","handleMove","handleInsert","handleReplace","handleUnshift","handleRemove","FieldArray","shouldComponentUpdate","touch","doc","document","activeElement","body","mapPropsToValues","vanillaProps","config","Component","actions","formikProps","mapPropsToStatus","mapPropsToErrors","mapPropsToTouched","renderFormComponent"],"mappings":"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"}